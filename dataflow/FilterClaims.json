{
	"name": "FilterClaims",
	"properties": {
		"folder": {
			"name": "Transform"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dsControlFiles",
						"type": "DatasetReference"
					},
					"name": "FilterClaimsFile"
				},
				{
					"dataset": {
						"referenceName": "dsQuery",
						"type": "DatasetReference"
					},
					"name": "FactTransactionKeys"
				},
				{
					"dataset": {
						"referenceName": "dsQuery",
						"type": "DatasetReference"
					},
					"name": "DimClaimClaimKey"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dsFactClaimTrans",
						"type": "DatasetReference"
					},
					"name": "FactTransaction"
				},
				{
					"dataset": {
						"referenceName": "dsDimClaim",
						"type": "DatasetReference"
					},
					"name": "DimClaim"
				}
			],
			"transformations": [
				{
					"name": "JoinFactTrans"
				},
				{
					"name": "AlterFactRow"
				},
				{
					"name": "AlterClaimRow"
				},
				{
					"name": "JoinClaimKey"
				}
			],
			"script": "parameters{\n\tCarrierCode as string\n}\nsource(output(\n\t\t{Claim #} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[(concat($CarrierCode, '/',$CarrierCode, ' Claims Filter.xlsx'))]) ~> FilterClaimsFile\nsource(output(\n\t\tTransactionKey as long,\n\t\tClaimNumber as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_COMMITTED',\n\tquery: (concat('SELECT fc.TransactionKey,ClaimNumber FROM FactClaimTransaction fc INNER JOIN DimClaim dc ON fc.ClaimKey=dc.ClaimKey INNER JOIN DimCarrier c ON dc.CarrierKey=c.CarrierKey WHERE CarrierCode=',\"'\",$CarrierCode,\"'\")),\n\tformat: 'query',\n\tstaged: false) ~> FactTransactionKeys\nsource(output(\n\t\tClaimKey as long,\n\t\tClaimNumber as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (concat('SELECT ClaimKey,ClaimNumber FROM DimClaim dc INNER JOIN DimCarrier c ON dc.CarrierKey=c.CarrierKey WHERE c.CarrierCode= ',\"'\",$CarrierCode,\"'\" )),\n\tformat: 'query',\n\tstaged: false) ~> DimClaimClaimKey\nFilterClaimsFile, FactTransactionKeys join({Claim #} == ClaimNumber,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinFactTrans\nJoinFactTrans alterRow(deleteIf(true())) ~> AlterFactRow\nJoinClaimKey alterRow(deleteIf(true())) ~> AlterClaimRow\nFilterClaimsFile, DimClaimClaimKey join({Claim #} == ClaimNumber,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinClaimKey\nAlterFactRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['TransactionKey'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTransactionKey\n\t)) ~> FactTransaction\nAlterClaimRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tClaimKey as long,\n\t\tClaimNumber as string,\n\t\tPolicyNumber as string,\n\t\tPolicyEffectiveDate as date,\n\t\tPolicyExpirationDate as date,\n\t\tClaimant as string,\n\t\tAccident_Description as string,\n\t\tDateofLoss as date,\n\t\tReportedDate as date,\n\t\tClosedDate as date,\n\t\tDateOfHire as date,\n\t\tDriver as string,\n\t\tPolicyYear as integer,\n\t\tPolicyPeriod as string,\n\t\tAge as integer,\n\t\tClientCarrierGroupKey as integer,\n\t\tTimeOfLoss as string,\n\t\tLagTime as string,\n\t\tDaysToClose as integer,\n\t\tTenure as integer,\n\t\tOccurrence_State as string,\n\t\tBenefit_State as string,\n\t\tClientKey as integer,\n\t\tLastLoadTime as timestamp,\n\t\tDayOfWeek as string,\n\t\tLineOfBusinessKey as integer,\n\t\tCarrierKey as integer,\n\t\tClaimHashKey as string,\n\t\tFillerClaim as boolean\n\t),\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['ClaimKey'],\n\tformat: 'table',\n\tstaged: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tClaimKey\n\t)) ~> DimClaim"
		}
	}
}